<?xml version="1.0" encoding="UTF-8"?>
<module
	name="module-error-handler-plugin"
	category="SELECT"
	doc:description="This module provides common error handling for APIs"
	xmlns="http://www.mulesoft.org/schema/mule/module"
	xmlns:mule="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:core="http://www.mulesoft.org/schema/mule/core"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		   http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd 
           http://www.mulesoft.org/schema/mule/module http://www.mulesoft.org/schema/mule/module/current/mule-module.xsd
           http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd  
           http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

	<operation
		name="process-error"
		displayName="Process Error">
		<parameters>

			<!-- Common Errors -->
			<parameter
				name="useGeneratedError"
				type="boolean"
				use="OPTIONAL"
				displayName="Use Generated Error Description Instead"
				defaultValue="true"
				role="BEHAVIOUR"
				order="1"
				tab="Common Errors"></parameter>

			<parameter
				name="badRequestError"
				type="string"
				use="OPTIONAL"
				displayName="400 Bad Request"
				defaultValue='There was an issue with your request'
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="unauthorizedError"
				type="string"
				use="OPTIONAL"
				displayName="401 Unauthorized"
				defaultValue='Authentication was not provided or is invalid'
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="forbiddenError"
				type="string"
				use="OPTIONAL"
				displayName="403 Forbidden"
				defaultValue='You are not allowed to make this request'
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="notFoundError"
				type="string"
				use="OPTIONAL"
				displayName="404 Not Found"
				defaultValue="The resource is not found"
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="methodNotAllowedError"
				type="string"
				use="OPTIONAL"
				displayName="405 Method Not Allowed"
				defaultValue="The method is not allowed on the resource"
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="notAcceptableError"
				type="string"
				use="OPTIONAL"
				displayName="406 Not Acceptable"
				defaultValue='The API cannot provide the requested accepted response'
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="timeoutError"
				type="string"
				use="OPTIONAL"
				displayName="408 Request Timeout"
				defaultValue='The request to the server has been timed-out'
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="unsupportedMediaTypeError"
				type="string"
				displayName="415 Unsupported Media Type"
				use="OPTIONAL"
				defaultValue='Media type not supported'
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="tooManyRequestsError"
				type="string"
				use="OPTIONAL"
				displayName="429 Too Many Requests"
				defaultValue='You have made too many requests to the server'
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="expressionError"
				type="string"
				use="OPTIONAL"
				displayName="500 Dataweave Expression Error"
				defaultValue="Error with data transformation.  See log for details."
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="serverError"
				type="string"
				use="OPTIONAL"
				displayName="500 Internal Server Error (Default)"
				defaultValue='There is a server issue'
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="notImplementedError"
				type="string"
				displayName="501 Not Implemented"
				use="OPTIONAL"
				defaultValue='The operation has not been implemented'
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<parameter
				name="connectivityError"
				type="string"
				use="OPTIONAL"
				displayName="503 Bad Connectivity"
				defaultValue="Service unavailable"
				role="BEHAVIOUR"
				tab="Common Errors"></parameter>

			<!-- Custom Errors -->
			<parameter
				name="customErrors"
				type="CustomErrorsType"
				displayName="Custom Errors"
				role="CONTENT"
				tab="Custom Errors"
				summary="Provide the custom error definitions"
				defaultValue="#[{}]"></parameter>

			<!-- Advanced -->
			<parameter
				name="error"
				type="any"
				displayName="Error Object"
				defaultValue="#[error]"
				role="BEHAVIOUR"
				order="1"
				tab="Advanced"></parameter>

			<parameter
				name="previousError"
				type="any"
				use="OPTIONAL"
				displayName="Use Previous Error"
				defaultValue="#['']"
				summary="Script to generate the previous error message.  Usually pulled from the external system's response in the error object.  Set empty string to ignore previous errors."
				role="CONTENT"
				tab="Advanced" />

			<parameter
				name="responseKey"
				type="any"
				use="OPTIONAL"
				displayName="Response Key Name for Payload"
				defaultValue="#['error']"
				summary="The response key name to which to add the error payload.  Set empty string to set the payload as the root element."
				role="BEHAVIOUR"
				tab="Advanced" />

		</parameters>

		<body>
			<mule:set-variable
				value="#[output application/java
					import getErrorTypeAsString from module_error_handler_plugin::common
					---
					getErrorTypeAsString(vars.error.errorType)]"
				doc:name="Error Type"
				variableName="errorType" />

			<mule:logger
				level="DEBUG"
				category="org.mulesoft.modules.errorhandler"
				message='#[output aplication/java ---
					"Error type: " ++ (vars.errorType default "") ++ "  Error Description: " ++ (vars.error.description default "")]' />

			<!-- Load the default error definitions. -->
			<mule:set-variable
				value="#[${file::module_error_handler_plugin/defaultErrors.dwl}]"
				doc:name="Default Errors"
				variableName="defaultErrors" />

			<mule:logger
				level="DEBUG"
				message="Default Errors: #[vars.defaultErrors]"
				category="org.mulesoft.modules.errorhandler"></mule:logger>
			<mule:logger
				level="DEBUG"
				message="Custom Errors: #[vars.customErrors]"
				category="org.mulesoft.modules.errorhandler"></mule:logger>

			<ee:transform doc:name="Set payload to error">
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
						import * from module_error_handler_plugin::common
						output application/json
						var error = getError(vars.errorType, vars.defaultErrors, vars.customErrors default {})
						var responseKey = vars.responseKey
						var responseError = error update {
								// Use the previous error message if it exists, otherwise use the provided message.
						        case message at .message -> if (!isEmpty(vars.previousError)) vars.previousError else message
						    } 
						---
						if (!isEmpty(responseKey) and (responseKey is String))
							{
								(responseKey): responseError
							}
						else
							responseError
						]]>
					</ee:set-payload>
					<ee:set-attributes><![CDATA[%dw 2.0
						import * from module_error_handler_plugin::common
						output application/java
						var error = getError(vars.errorType, vars.defaultErrors, vars.customErrors default {})
						var code = error.code default 500
						var message = toString(error.message, "Internal Server Error")
						var previousMessage = toString(vars.previousError)
						var description = toString(vars.error.description)
						
						// Concatenate current error message, previous error message, and error description without duplicates or empties
						var log = (([message, previousMessage, description] filter !isEmpty($)) distinctBy $) joinBy " | "				
						---
						{
							httpStatus: code as Number,
							errorLog: log
						}]]>
					</ee:set-attributes>
				</ee:message>
			</ee:transform>

			<mule:logger
				level="DEBUG"
				category="org.mulesoft.modules.errorhandler"
				message='#[output application/java --- "Error HTTP Status: " ++ attributes.httpStatus default "" ++ "  Error Response: " ++ write(payload, "application/json") default ""]' />
		</body>
		<output type="OutputResponseType"></output>
		<output-attributes type="OutputAttributesType"></output-attributes>
	</operation>

</module>
